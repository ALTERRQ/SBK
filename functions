#!/bin/bash

# CAUTION: this script could be dangerous!!!
# SBK functions by ALTERRQ

status(){
    info_msg "Secure Boot status:"
    bootctl status 2>&1 | grep 'Secure Boot' || warning_msg "Failed to determine secure boot status"

    info_msg "Script files:"
    tree "$SBK_HOME"

}

reset(){
    info_msg "Resetting script!"

    # Delete automatic signing scripts
    remove_automatic_signing

    # Delete everything in home except scripts
    find "$SBK_HOME" -mindepth 1 -maxdepth 1 -not -name "scripts" -exec rm -rf {} + || error_exit "Failed to clean home"

    success_msg "Reset completed successfully."
    exit 0
}

backup(){
    info_msg "Creating backup of existing keys & files..."

    # Backup currently enrolled certs
    efi-readvar > "$SBK_HOME"/bak/all-efi-keys-original.txt || error_exit "Failed to backup efi keylist"
    efi-readvar -v PK  -o "$SBK_HOME"/bak/PK-original.esl || error_exit "Failed to backup PK"
    efi-readvar -v KEK -o "$SBK_HOME"/bak/KEK-original.esl || error_exit "Failed to backup KEK"
    efi-readvar -v db  -o "$SBK_HOME"/bak/db-original.esl || error_exit "Failed to backup db"
    efi-readvar -v dbx -o "$SBK_HOME"/bak/dbx-original.esl || error_exit "Failed to backup dbx"

    # Backup grubx64.efi
    if [ -f "$BOOTLOADER" ]; then
        cp -v "$BOOTLOADER" "$SBK_HOME"/bak/ || warning_msg "Failed to backup bootloader"
    else
        warning_msg "Bootloader not found at $BOOTLOADER"
    fi

    # Backup kernel
    if [ -f "$KERNEL_IMAGE" ]; then
        cp -v "$KERNEL_IMAGE" "$SBK_HOME"/bak/ || warning_msg "Failed to backup kernel"
    else
        warning_msg "Kernel image not found at $KERNEL_IMAGE"
    fi

    # List backed up files
    ls -lh "$SBK_HOME"/bak/

    BACKUP_DONE=1
    echo "BACKUP_DONE=1" >> "$SBK_HOME"/.config
    success_msg "Backup completed successfully."
}

restore(){
    info_msg "Restoring backed up files..."

    # Check if backups exists
    if [ ! -f "$SBK_HOME/bak/grubx64.efi" ]; then
        error_exit "No backup found for grubx64.efi. Run backup first."
    fi

    if [ ! -f "$SBK_HOME/bak/vmlinuz-$KERNEL_VERSION" ]; then
        error_exit "No backup found for kernel. Run backup first."
    fi

    # Restore grub
    cp -vf "$SBK_HOME"/bak/grubx64.efi /boot/efi/EFI/kali/grubx64.efi || error_exit "Failed to restore grubx64.efi"
    success_msg "GRUB restored succesfully."

    # Restore kernel
    cp -vf "$SBK_HOME"/bak/"vmlinuz-$KERNEL_VERSION" "$KERNEL_IMAGE" || error_exit "Failed to restore $KERNEL_VERSION"
    success_msg "vmlinuz-$KERNEL_VERSION restored succesfully."

    echo -e "${BLUE}==================================================${ENDCOLOR}"
    echo -e "${CYAN}[*]      Restoration completed successfully.${ENDCOLOR}"
    echo -e "${CYAN}[*]  Restore original keys in your UEFI (BIOS)!${ENDCOLOR}"
    echo -e "${CYAN}[*] That is the easiest and safest way to do it.${ENDCOLOR}"
    echo -e "${BLUE}==================================================${ENDCOLOR}"
}

mkconfigs(){
    info_msg "Creating configuration files for key generation..."

    # Make PK.cfg and use it as a template later
    cat <<EOF > "$SBK_HOME/cfg/PK.cfg"
[ req ]
default_bits         = 4096
encrypt_key          = no
string_mask          = utf8only
utf8                 = yes
prompt               = no
distinguished_name   = my_dist_name
x509_extensions      = my_x509_exts

[ my_dist_name ]
commonName           = SBK PK
emailAddress         = github.com/ALTERRQ/SBK

[ my_x509_exts ]
keyUsage             = digitalSignature
extendedKeyUsage     = codeSigning
basicConstraints     = critical,CA:FALSE
subjectKeyIdentifier = hash
EOF

    [ $? -eq 0 ] || error_exit "Failed to create PK.cfg"

    # Make KEK.cfg
    cp -v "$SBK_HOME"/cfg/PK.cfg "$SBK_HOME"/cfg/KEK.cfg || error_exit "Failed to copy PK.cfg to KEK.cfg"
    sed -i 's/PK/KEK/g' "$SBK_HOME"/cfg/KEK.cfg || error_exit "Failed to modify KEK.cfg"

    # Make db.cfg
    cp -v "$SBK_HOME"/cfg/PK.cfg "$SBK_HOME"/cfg/db.cfg || error_exit "Failed to copy PK.cfg to db.cfg"
    sed -i 's/PK/db/g' "$SBK_HOME"/cfg/db.cfg || error_exit "Failed to modify db.cfg"

    MKCONFIGS_DONE=1
    echo "MKCONFIGS_DONE=1" >> "$SBK_HOME"/.config
    success_msg "Configuration files created successfully."
}

mkcert(){
    info_msg "Generating Secure Boot keys..."

    # Check if configs were created
    if [ $MKCONFIGS_DONE -eq 0 ]; then
        error_exit "Configuration files not created."
    fi

    # Create Platform Key
    openssl req -x509 -sha256 -days 5490 -outform PEM \
        -config "$SBK_HOME"/cfg/PK.cfg \
        -keyout "$SBK_HOME"/PK.key -out "$SBK_HOME"/PK.pem || error_exit "Failed to generate PK"

    # Create Key Exchange Key
    openssl req -x509 -sha256 -days 5490 -outform PEM \
        -config "$SBK_HOME"/cfg/KEK.cfg \
        -keyout "$SBK_HOME"/KEK.key -out "$SBK_HOME"/KEK.pem || error_exit "Failed to generate KEK"

    # Create Signature Database
    openssl req -x509 -sha256 -days 5490 -outform PEM \
        -config "$SBK_HOME"/cfg/db.cfg \
        -keyout "$SBK_HOME"/db.key -out "$SBK_HOME"/db.pem || error_exit "Failed to generate db"

    # List created keys
    ls -l "$SBK_HOME"/*.pem "$SBK_HOME"/*.key

    MKCERT_DONE=1
    echo "MKCERT_DONE=1" >> "$SBK_HOME"/.config
    success_msg "Key generation completed successfully."
}

convert(){
    info_msg "Converting certificates to EFI format..."

    # Check if keys were generated
    if [ $MKCERT_DONE -eq 0 ]; then
        error_exit "Keys not generated. Create certificates first."
    fi

    #### Convert own certificates ####

    # Create a random GUID
    if [ -z "$OWN_GUID" ]; then
        OWN_GUID=$(uuidgen --random)
        echo "OWN_GUID=$OWN_GUID" >> "$SBK_HOME/.config" || error_exit "Failed to generate GUID"
        info_msg "Generated new GUID: $OWN_GUID"
    else
        info_msg "Using GUID: $OWN_GUID"
    fi

    # Create PK ESL file
    cert-to-efi-sig-list -g "$(< "$SBK_HOME"/guid.txt)" \
        "$SBK_HOME"/PK.pem "$SBK_HOME"/esl/PK.esl || error_exit "Failed to create PK.esl"

    # Create PK AUTH file
    sign-efi-sig-list -g "$(< "$SBK_HOME"/guid.txt)" \
        -t "$(date +'%F %T')" \
        -c "$SBK_HOME"/PK.pem -k "$SBK_HOME"/PK.key \
        PK \
        "$SBK_HOME"/esl/PK.esl "$SBK_HOME"/auth/PK.auth || error_exit "Failed to create PK.auth"

    # Create a KEK ESL file
    cert-to-efi-sig-list -g "$(< "$SBK_HOME"/guid.txt)" \
        "$SBK_HOME"/KEK.pem "$SBK_HOME"/esl/KEK.esl || error_exit "Failed to create KEK.esl"

    # Create a KEK AUTH file
    sign-efi-sig-list -g "$(< "$SBK_HOME"/guid.txt)" \
        -t "$(date +'%F %T')" \
        -c "$SBK_HOME"/PK.pem -k "$SBK_HOME"/PK.key \
        KEK \
        "$SBK_HOME"/esl/KEK.esl "$SBK_HOME"/auth/KEK.auth || error_exit "Failed to create KEK.auth"

    # Create a db ESL file
    cert-to-efi-sig-list -g "$(< "$SBK_HOME"/guid.txt)" \
        "$SBK_HOME"/db.pem "$SBK_HOME"/esl/db.esl || error_exit "Failed to create db.esl"

    # Create a db AUTH file
    sign-efi-sig-list -g "$(< "$SBK_HOME"/guid.txt)" \
        -t "$(date +'%F %T')" \
        -c "$SBK_HOME"/KEK.pem -k "$SBK_HOME"/KEK.key \
        db \
        "$SBK_HOME"/esl/db.esl "$SBK_HOME"/auth/db.auth || error_exit "Failed to create db.auth"

    # Convert db.pem to db.der
    openssl x509 -in "$SBK_HOME/db.pem" -out "$SBK_HOME/db.der" -outform der

    # Convert db.key to db.priv
    cp "$SBK_HOME"/db.key "$SBK_HOME"/db.priv

    ####Convert backed up OEM Keys####

    ##Convert backed up OEM KEK Key##

    # Extract KEK-original
    sig-list-to-certs "$SBK_HOME"/bak/KEK-original.esl "$SBK_HOME"/extract/KEK || error_exit "Failed to extract KEK-original"

    # Create a KEK ESL file
    sbsiglist --type x509 \
        --owner "$OEM_GUID" \
        "$SBK_HOME"/extract/KEK-"$KEK_NUM".der \
        --output "$SBK_HOME"/esl/KEK_"$OEM_NAME".esl || error_exit "Failed to create KEK_$OEM_NAME.esl"

    # Create a KEK AUTH file
    sign-efi-sig-list -a -g "$OEM_GUID" \
        -t "$(date +'%F %T')" \
        -k "$SBK_HOME"/PK.key -c "$SBK_HOME"/PK.pem \
        KEK \
        "$SBK_HOME"/esl/KEK_"$OEM_NAME".esl \
        "$SBK_HOME"/auth/KEK_"$OEM_NAME".auth || error_exit "Failed to create KEK_$OEM_NAME.auth"

    ##Convert backed up OEM db Key##

    # Extract db-original
    sig-list-to-certs "$SBK_HOME"/bak/db-original.esl "$SBK_HOME"/extract/db || error_exit "Failed to extract db-original"

    # Create a db ESL file
    sbsiglist --type x509 \
        --owner "$OEM_GUID" \
        "$SBK_HOME"/extract/db-"$db_NUM".der \
        --output "$SBK_HOME"/esl/db_"$OEM_NAME".esl || error_exit "Failed to create db_$OEM_NAME.esl"

    # Create a db AUTH file
    sign-efi-sig-list -a -g "$OEM_GUID" \
        -t "$(date +'%F %T')" \
        -k "$SBK_HOME"/KEK.key -c "$SBK_HOME"/KEK.pem \
        db \
        "$SBK_HOME"/esl/db_"$OEM_NAME".esl \
        "$SBK_HOME"/auth/db_"$OEM_NAME".auth || error_exit "Failed to create db_$OEM_NAME.auth"

    #### Convert backed up Microsoft KEK Keys ####

    if [ ${#KEK_MICROSOFT_LISTS[@]} -gt 0 ]; then
        info_msg "Converting Microsoft KEK keys..."
        rm -f "$SBK_HOME"/esl/KEK_MS.esl  # Start fresh

        for index in "${KEK_MICROSOFT_LISTS[@]}"; do
            if [ -f "$SBK_HOME/extract/KEK-$index.der" ]; then
                info_msg "Processing Microsoft KEK key at index $index"
                openssl x509 -noout -subject -dates -inform DER -in "$SBK_HOME/extract/KEK-$index.der" || error_exit "Failed to read Microsoft KEK certificate at index $index"

                # Create individual ESL for this Microsoft KEK
                sbsiglist --type x509 \
                    --owner "$MS_GUID" \
                    "$SBK_HOME/extract/KEK-$index.der" \
                    --output "$SBK_HOME/esl/KEK_MS_$index.esl" || error_exit "Failed to create KEK_MS_$index.esl"

                # Append to combined ESL
                cat "$SBK_HOME/esl/KEK_MS_$index.esl" >> "$SBK_HOME/esl/KEK_MS.esl"
            else
                error_exit "Microsoft KEK certificate not found: $SBK_HOME/extract/KEK-$index.der"
            fi
        done

        # Create combined AUTH file for Microsoft KEK
        if [ -f "$SBK_HOME/esl/KEK_MS.esl" ]; then
            sign-efi-sig-list -a -g "$MS_GUID" \
                -t "$(date +'%F %T')" \
                -k "$SBK_HOME/PK.key" -c "$SBK_HOME/PK.pem" \
                KEK \
                "$SBK_HOME/esl/KEK_MS.esl" \
                "$SBK_HOME/auth/KEK_MS.auth" || error_exit "Failed to create KEK_MS.auth"
        fi
    else
        warning_msg "No Microsoft KEK keys found to convert"
    fi

    #### Convert backed up Microsoft db Keys ####

    if [ ${#DB_MICROSOFT_LISTS[@]} -gt 0 ]; then
        info_msg "Converting Microsoft db keys..."
        rm -f "$SBK_HOME"/esl/db_MS.esl  # Start fresh

        for index in "${DB_MICROSOFT_LISTS[@]}"; do
            if [ -f "$SBK_HOME/extract/db-$index.der" ]; then
                info_msg "Processing Microsoft db key at index $index"
                openssl x509 -noout -subject -dates -inform DER -in "$SBK_HOME/extract/db-$index.der" || error_exit "Failed to read Microsoft db certificate at index $index"

                # Create individual ESL for this Microsoft db
                sbsiglist --type x509 \
                    --owner "$MS_GUID" \
                    "$SBK_HOME/extract/db-$index.der" \
                    --output "$SBK_HOME/esl/db_MS_$index.esl" || error_exit "Failed to create db_MS_$index.esl"

                # Append to combined ESL
                cat "$SBK_HOME/esl/db_MS_$index.esl" >> "$SBK_HOME/esl/db_MS.esl"
            else
                error_exit "Microsoft db certificate not found: $SBK_HOME/extract/db-$index.der"
            fi
        done

        # Create combined AUTH file for Microsoft db
        if [ -f "$SBK_HOME/esl/db_MS.esl" ]; then
            sign-efi-sig-list -a -g "$MS_GUID" \
                -t "$(date +'%F %T')" \
                -k "$SBK_HOME/KEK.key" -c "$SBK_HOME/KEK.pem" \
                db \
                "$SBK_HOME/esl/db_MS.esl" \
                "$SBK_HOME/auth/db_MS.auth" || error_exit "Failed to create db_MS.auth"
        fi
    else
        warning_msg "No Microsoft db keys found to convert"
    fi

    #### Convert backed up Microsoft dbx Keys ####

    if [ -f "$SBK_HOME/bak/dbx-original.esl" ]; then
        info_msg "Converting Microsoft dbx keys..."
        sign-efi-sig-list -a -g "$MS_GUID" \
            -t "$(date +'%F %T')" \
            -k "$SBK_HOME/KEK.key" -c "$SBK_HOME/KEK.pem" \
            dbx \
            "$SBK_HOME/bak/dbx-original.esl" \
            "$SBK_HOME/auth/dbx_MS.auth" || error_exit "Failed to create dbx_MS.auth"
    else
        warning_msg "No dbx backup found. Skipping dbx."
    fi

    # List created files
    ls -l "$SBK_HOME"/esl/
    ls -l "$SBK_HOME"/auth/
    ls -l "$SBK_HOME"/extract/

    CONVERT_DONE=1
    echo "CONVERT_DONE=1" >> "$SBK_HOME"/.config
    success_msg "Certificate conversion completed successfully."
}

sign_grub() {
    info_msg "Signing GRUB bootloader..."

    if [ -f "$BOOTLOADER" ]; then
        sbsign "$BOOTLOADER" \
            --key "$SBK_HOME"/db.key --cert "$SBK_HOME"/db.pem \
            --output "$BOOTLOADER" || error_exit "Failed to sign bootloader"

        # Show the signature of bootloader
        info_msg "Bootloader signature:"
        pesign -S -i "$BOOTLOADER" || warning_msg "Failed to verify bootloader signature"
        success_msg "GRUB signed successfully."
    else
        error_exit "Bootloader not found at $BOOTLOADER"
    fi
}

sign_kernel() {

    # For signing multiple kernels
    local kernel_version="$1"
    local kernel_image="/boot/vmlinuz-$kernel_version"

    info_msg "Signing kernel: $kernel_version"

    if [ ! -f "$kernel_image" ]; then
        warning_msg "Kernel image not found: $kernel_image"
        return 1
    fi

    # Sign the kernel
    sbsign "$kernel_image" \
        --key "$SBK_HOME"/db.key --cert "$SBK_HOME"/db.pem \
        --output "$kernel_image" || error_exit "Failed to sign kernel $kernel_version"

    # Verify signature
    info_msg "Kernel signature for $kernel_version:"
    pesign -S -i "$kernel_image" || warning_msg "Failed to verify kernel signature"
    success_msg "Kernel $kernel_version signed successfully."
}

sign_all_kernels() {
    info_msg "Signing all installed kernels..."

    # Get all installed kernel versions
    local kernels=$(ls /boot/vmlinuz-* 2>/dev/null | grep -v rescue | sort -V)

    if [ -z "$kernels" ]; then
        error_exit "No kernel images found in /boot/"
    fi

    local signed_count=0
    for kernel in $kernels; do
        local kernel_version=$(basename "$kernel" | sed 's/vmlinuz-//')
        if sign_kernel "$kernel_version"; then
            ((signed_count++))
        fi
    done

    SIGN_ALL_KERNELS=1
    echo "SIGN_ALL_KERNELS=1" >> "$SBK_HOME"/.config
    success_msg "Signed $signed_count kernel(s) successfully."
}

setup_automatic_signing() {
    info_msg "Setting up automatic signing hooks..."

    # Determine hook dirs
    local kernel_hooks_dir="/etc/kernel/postinst.d"
    local grub_hooks_dir="/etc/grub.d/post-install"

    # Create kernel post-install hook
    cp -vf "$SBK_HOME/kernel-sbk-postinst.sh" "$kernel_hooks_dir/kernel-sbk-postinst.sh" || error_exit "Failed to create kernel post-install hook"

    # Create GRUB post-install hook
    cp -vf "$SBK_HOME/grub-sbk-postinst.sh" "$grub_hooks_dir/grub-sbk-postinst.sh" || error_exit "Failed to create GRUB post-install hook"

    success_msg "Automatic signing hooks installed successfully."
}

remove_automatic_signing() {
    info_msg "Removing automatic signing hooks..."

    rm -fr "$kernel_hooks_dir/kernel-sbk-postinst.sh"
    rm -fr "$grub_hooks_dir/grub-sbk-postinst.sh"

    success_msg "Automatic signing hooks removed successfully."
}

dkms_sign(){
    info_msg "Enabling DKMS automatic signing..."

    # Configure framework.conf
    if ! grep -q "mok_signing_key=$SBK_HOME/db.priv" /etc/dkms/framework.conf; then
        echo "mok_signing_key=$SBK_HOME/db.priv" >> /etc/dkms/framework.conf || error_exit "Failed to edit /etc/dkms/framework.conf"
    fi
    if ! grep -q "mok_certificate=$SBK_HOME/db.der" /etc/dkms/framework.conf; then
        echo "mok_certificate=$SBK_HOME/db.der" >> /etc/dkms/framework.conf || error_exit "Failed to edit /etc/dkms/framework.conf"
    fi

    success_msg "Enabled DKMS automatic signing successfully"

    info_msg "Rebuilding modules to sign them:"

    # Determine installed modules
    dkms_modules=$(dkms status 2>/dev/null | sed -n 's/^\([^\/]*\)\/\([^,]*\),.*/\1\/\2/p' | sort -u)

    info_msg "Found module(s): $dkms_modules"

    if [ -z "$dkms_modules" ]; then
        warning_msg "No DKMS dkms_modules found to rebuild"
        return 0
    fi

    local rebuild_errors=0
    local module_count=0

    for module in $dkms_modules; do
        ((module_count++))
        info_msg "[$module_count/$(echo "$dkms_modules" | wc -w)] Rebuilding module: $module"

        if dkms build "$module" --force; then
            success_msg "Successfully rebuilt $module"
            if dkms install "$module" --force; then
                success_msg "Successfully reinstalled $module"
            else
                warning_msg "Failed to reinstall $module"
                ((rebuild_errors++))
            fi
        else
            warning_msg "  Failed to rebuild $module"
            ((rebuild_errors++))
        fi
    done

    if [ $rebuild_errors -eq 0 ]; then
        success_msg "DKMS signing completed successfully"
    else
        warning_msg "DKMS signing completed with $rebuild_errors errors"
    fi
}

enroll(){
    info_msg "Enrolling created keys into Secure Boot..."

    # Check if certificates were converted
    if [ $CONVERT_DONE -eq 0 ]; then
        error_exit "Certificates not converted. Run convert first."
    fi

    # Make EFI variables mutable
    chattr -i /sys/firmware/efi/efivars/{PK,KEK,db,dbx}-* 2>/dev/null || true

    # Enroll our keys
    efi-updatevar -f "$SBK_HOME"/auth/db.auth db || error_exit "Failed to enroll db key"
    efi-updatevar -f "$SBK_HOME"/auth/KEK.auth KEK || error_exit "Failed to enroll KEK key"
    efi-updatevar -f "$SBK_HOME"/auth/PK.auth PK || error_exit "Failed to enroll PK key"

    # Make EFI variables immutable
    chattr +i /sys/firmware/efi/efivars/{PK,KEK,db,dbx}-* 2>/dev/null || true

    ENROLL_DONE=1
    echo "ENROLL_DONE=1" >> "$SBK_HOME"/.config
    success_msg "Key enrollment completed successfully."
}

enroll_oem(){
    info_msg "Enrolling OEM keys into Secure Boot..."

    # Check if certificates were converted
    if [ $CONVERT_DONE -eq 0 ]; then
        error_exit "Certificates not converted. Run convert first."
    fi

    # Make EFI variables mutable
    chattr -i /sys/firmware/efi/efivars/{PK,KEK,db,dbx}-* 2>/dev/null || true

    # Enroll OEM KEK key
    efi-updatevar -a -f "$SBK_HOME"/auth/KEK_"$OEM_NAME".auth KEK || error_exit "Failed to enroll OEM KEK key"

    # Enroll OEM db key
    efi-updatevar -a -f "$SBK_HOME"/auth/db_"$OEM_NAME".auth db || error_exit "Failed to enroll OEM db key"

    # Make EFI variables immutable
    chattr +i /sys/firmware/efi/efivars/{PK,KEK,db,dbx}-* 2>/dev/null || true

    ENROLL_OEM_DONE=1
    echo "ENROLL_OEM_DONE=1" >> "$SBK_HOME"/.config
    success_msg "OEM key enrollment completed successfully."
}

enroll_ms(){
    info_msg "Enrolling Microsoft keys into Secure Boot..."

    # Check if certificates were converted
    if [ $CONVERT_DONE -eq 0 ]; then
        error_exit "Certificates not converted. Run convert first."
    fi

    # Enroll Microsoft keys

    # Make EFI variables mutable
    chattr -i /sys/firmware/efi/efivars/{PK,KEK,db,dbx}-* 2>/dev/null || true

    # Enroll Microsoft keys
    info_msg "Enrolling Microsoft keys..."
    efi-updatevar -a -f "$SBK_HOME"/auth/KEK_MS.auth KEK || error_exit "Failed to enroll Microsoft KEK key"
    efi-updatevar -a -f "$SBK_HOME"/auth/db_MS.auth db || error_exit "Failed to enroll Microsoft db key"
    #efi-updatevar -f "$SBK_HOME"/auth/dbx_MS.auth dbx || warning_msg "Failed to enroll Microsoft dbx key"

    # Make EFI variables immutable
    chattr +i /sys/firmware/efi/efivars/{PK,KEK,db,dbx}-* 2>/dev/null || true

    ENROLL_MS_DONE=1
    echo "ENROLL_MS_DONE=1" >> "$SBK_HOME"/.config
    success_msg "Microsoft key enrollment completed successfully."
}
