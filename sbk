#!/bin/bash

# CAUTION: this script could be dangerous!!!
# Secure Boot for Kali by ALTERRQ

# Colors
RED="\e[1;31m"
GREEN="\e[1;32m"
BLUE="\e[1;34m"
ORANGE="\e[1;33m"
PURPLE="\e[1;35m"
CYAN="\e[1;36m"
ENDCOLOR="\e[0m"

# Function for consistent error messages
error_exit() {
    echo -e "${RED}[ERROR] $1${ENDCOLOR}" >&2
    exit 1
}

# Function for consistent info messages
info_msg() {
    echo -e "${BLUE}[INFO] $1${ENDCOLOR}"
}

# Function for consistent success messages
success_msg() {
    echo -e "${GREEN}[SUCCESS] $1${ENDCOLOR}"
}

# Function for consistent warning messages
warning_msg() {
    echo -e "${ORANGE}[WARNING] $1${ENDCOLOR}"
}

# Determine some variables
SBK_HOME=/root/sbk
BOOTLOADER=/boot/efi/EFI/kali/grubx64.efi
KERNEL_VERSION=$(uname -r)
KERNEL_IMAGE="/boot/vmlinuz-$KERNEL_VERSION"
MS_GUID=77fa9abd-0359-4d32-bd60-28f4e78f784b
CURRENT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
config_file="$SBK_HOME/config"
INSTALLED=0

# Logging
if [[ -d "$SBK_HOME" ]]; then
    > "$SBK_HOME/sbk.log"
    exec > >(tee >(
        while IFS= read -r line; do
            printf "%s: %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$line" >> "$SBK_HOME/sbk.log"
        done
    ))
    exec 2>&1
else
    > "$CURRENT_DIR/sbk-install.log"
    exec > >(tee >(
        while IFS= read -r line; do
            printf "%s: %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$line" >> "$CURRENT_DIR/sbk-install.log"
        done
    ))
    exec 2>&1
fi

# Check root
if [[ $EUID -ne 0 ]]; then
    error_exit "This script must be run as root."
fi

# Create a home for the script in /root
if [[ ! -d "$SBK_HOME" ]]; then
    info_msg "Creating HOME..."
    mkdir -vp "$SBK_HOME"/{auth,bak,cfg,esl,extract,scripts} || error_exit "Failed to create $SBK_HOME"
    success_msg "HOME created successfully."

elif [[ ! -d "$SBK_HOME"/auth ]]; then
    info_msg "Creating HOME..."
    mkdir -vp "$SBK_HOME"/{auth,bak,cfg,esl,extract} || error_exit "Failed to recreate $SBK_HOME"
    success_msg "HOME created successfully."

    INSTALLED=1
    success_msg "Script is already installed."
fi

# Install dependencies
DEPLIST="openssl efitools sbsigntool pesign uuid-runtime systemd-boot-tools dkms"
if [[ ! -f "$SBK_HOME/config" ]]; then
    sudo apt update
    sudo apt install $DEPLIST -y
    if [ $? -ne 0 ]; then
        error_exit "Failed to install dependencies"
    else
        success_msg "Dependencies installed successfully."
        read -rp "Press Enter to continue..."
    fi
else
    info_msg "Dependencies should be installed..."
fi

# Source config or create config and gather information from efi
if [[ -f "$SBK_HOME/config" ]]; then

    # Source config
    source "$SBK_HOME/config" || error_exit "Failed to source config"

    # Source functions
    source "$SBK_HOME/scripts/functions" || error_exit "Failed to source functions"

else
    # Source functions
    source "$CURRENT_DIR/functions" || error_exit "Failed to source functions"

    ## Determine and save some vars to config ##
    info_msg "Saving EFI vars to config..."

    # Get OEM_NAME
    OEM_NAME=$(efi-readvar -v PK 2>&1 | grep -m1 "CN=" | awk -F'CN=' '{print $2}' | awk '{print $1}')
    if [ -z "$OEM_NAME" ]; then
        error_exit "Could not determine OEM name"
    fi
    if [ "$OEM_NAME" == "SBK" ]; then
        error_exit "You did not enrolled back the factory default keys"
    fi

    # Get KEK_INFO
    KEK_INFO=$(efi-readvar -v KEK 2>&1)
    if [ $? -ne 0 ]; then
        error_exit "Failed to read KEK variables"
    fi

    # Get KEK_NUM
    KEK_NUM=$(echo "$KEK_INFO" | awk -v oem="$OEM_NAME" '
        /^KEK: List/ {gsub(/,/, "", $3); list=$3}
        /CN=/ && $0 ~ oem {print list; exit}')
    if [ -z "$KEK_NUM" ]; then
        error_exit "OEM:'$OEM_NAME' is not found in KEK"
    fi

    # Get OEM_GUID
    OEM_GUID=$(echo "$KEK_INFO" | awk -v oem="$OEM_NAME" '
        /owner/ {gsub(/,/, "", $NF); guid=$NF}
        /CN=/ && $0 ~ oem {print guid; exit}')
    if [ -z "$OEM_GUID" ]; then
        error_exit "Failed to get OEM guid"
    fi

    # Get DB_INFO
    DB_INFO=$(efi-readvar -v db 2>&1)
    if [ $? -ne 0 ]; then
        error_exit "Failed to read db variables"
    fi

    # Get db_NUM
    db_NUM=$(echo "$DB_INFO" | awk -v oem="$OEM_NAME" '
        /^db: List/ {gsub(/,/, "", $3); list=$3}
        /CN=/ && $0 ~ oem {print list; exit}')
    if [ -z "$db_NUM" ]; then
        error_exit "OEM:'$OEM_NAME' is not found in db"
    fi

    # Get Microsoft key list numbers for KEK
    KEK_MICROSOFT_LISTS=$(echo "$KEK_INFO" | awk -v guid="$MS_GUID" '
    /^KEK: List/ {gsub(/,/, "", $3); list=$3}
    /owner/ && $NF ~ guid {print list}')
    if [ -z "$KEK_MICROSOFT_LISTS" ]; then
        error_exit "Failed to determine Microsoft KEK list"
    fi

    # Get Microsoft key list numbers for db
    DB_MICROSOFT_LISTS=$(echo "$DB_INFO" | awk -v guid="$MS_GUID" '
        /^db: List/ {gsub(/,/, "", $3); list=$3}
        /owner/ && $NF ~ guid {print list}')
     if [ -z "$DB_MICROSOFT_LISTS" ]; then
        error_exit "Failed to determine Microsoft DB list"
    fi

    # Create config
    touch "$SBK_HOME"/config

    # EFI variables to save to config
    variables_to_save=(
        "OEM_NAME"
        "KEK_NUM"
        "db_NUM"
        "OEM_GUID"
        "KEK_MICROSOFT_LISTS"
        "DB_MICROSOFT_LISTS"
        "INSTALLED"
    )

    # Convert to arrays and format them properly
    KEK_MICROSOFT_LISTS=($KEK_MICROSOFT_LISTS)
    DB_MICROSOFT_LISTS=($DB_MICROSOFT_LISTS)

    # Format arrays as bash arrays
    kek_array_value="($(printf '"%s" ' "${KEK_MICROSOFT_LISTS[@]}"))"
    db_array_value="($(printf '"%s" ' "${DB_MICROSOFT_LISTS[@]}"))"

    # Save vars to config
    for var in "${variables_to_save[@]}"; do
        if [[ "$var" == "KEK_MICROSOFT_LISTS" ]]; then
            value="$kek_array_value"
        elif [[ "$var" == "DB_MICROSOFT_LISTS" ]]; then
            value="$db_array_value"
        else
            value="${!var}"
        fi

        if ! modify_config "$var" "$value"; then
            rm -fr "$SBK_HOME/config"
            error_exit "Failed to add $var to config"
        fi
    done
        success_msg "EFI vars saved successfully."
        read -rp "Press Enter to continue..."
fi

# "Install" script
if [ $INSTALLED -eq 0 ]; then
    info_msg "Installing script..."

    # Copy sbk to /usr/local/bin
    cp -vf "$CURRENT_DIR/sbk" "/usr/local/bin" || error_exit "Failed to copy sbk to /usr/local/bin"

    # Copy functions to home
    cp -vf "$CURRENT_DIR/functions" "$SBK_HOME/scripts/functions" || error_exit "Failed to copy functions to SBK_HOME"

    # Copy kernel-sbk-postinst to home
    cp -vf "$CURRENT_DIR/kernel-sbk-postinst" "$SBK_HOME/scripts/kernel-sbk-postinst" || error_exit "Failed to copy kernel-sbk-postinst to SBK_HOME"

    # Copy grub-sbk-postinst to home
    cp -vf "$CURRENT_DIR/grub-sbk-postinst" "$SBK_HOME/scripts/grub-sbk-postinst" || error_exit "Failed to copy grub-sbk-postinst to SBK_HOME"

    INSTALLED=1
    modify_config "INSTALLED" "1"
    success_msg "Script installed succesfully. To use script run the command: \"sudo sbk\" anywhere."
    read -rp "Press Enter to continue..."
    exit 0
fi

complete_setup_stage1(){
    info_msg "Starting complete Secure Boot setup..."
    
    # Execute all steps in sequence
    backup
    mkconfigs
    mkcert
    convert

    # Signal script to start stage2 in next run
    STAGE_2=1
    echo "STAGE_2=1" >> "$SBK_HOME"/config

    echo -e "${BLUE}===========================================================${ENDCOLOR}"
    echo -e "${CYAN}[*] Please reboot to UEFI(BIOS) & delete all enrolled keys!${ENDCOLOR}"
    echo -e "${CYAN}[*] Also disable Key Provisioning if present!${ENDCOLOR}"
    echo -e "${CYAN}[*] Then run the 1. option again to complete the setup!!!${ENDCOLOR}"
    echo -e "${BLUE}===========================================================${ENDCOLOR}"
}

complete_setup_stage2(){
    info_msg "Continuing complete Secure Boot setup..."

    # Execute all steps in sequence
    info_msg "Installing GRUB for Secure Boot..."
    grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=kali --modules="tpm" --disable-shim-lock || error_exit "Failed to install GRUB for Secure Boot"
    success_msg "Installed GRUB succesfully."
    sign_all_kernels
    sign_grub
    dkms_sign
    setup_automatic_signing
    enroll
    enroll_oem
    read -rp "Do you want to enroll Microsoft keys (for dualboot with Windows)? [y/N]: " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        enroll_ms
    else
        info_msg "Microsoft keys will not be enrolled."
    fi
    info_msg "Enrolled keys:"
    efi-readvar

    SETUP_DONE=1
    echo "SETUP_DONE=1" >> "$SBK_HOME"/config

    echo -e "${BLUE}==============================================${ENDCOLOR}"
    echo -e "${CYAN}##############################################${ENDCOLOR}"
    echo -e "${GREEN}[+] Secure Boot setup completed successfully!${ENDCOLOR}"
    echo -e "${GREEN}[+] Now enable Secure Boot!${ENDCOLOR}"
    echo -e "${CYAN}##############################################${ENDCOLOR}"
    echo -e "${BLUE}==============================================${ENDCOLOR}"
}

# Function to display the menu
display_menu() {
    clear
    echo -e "${BLUE}===================================================${ENDCOLOR}"
    echo -e "${CYAN}         Kali Linux Secure Boot Setup Menu       ${ENDCOLOR}"
    echo -e "${BLUE}===================================================${ENDCOLOR}"
    echo -e "${GREEN}1. Complete Secure Boot Setup (Do Everything)${ENDCOLOR}"
    echo -e "${GREEN}2. Get Status${ENDCOLOR}"
    echo -e "${GREEN}3. List Enrolled Keys${ENDCOLOR}"
    echo -e "${GREEN}4. Backup Enrolled Keys${ENDCOLOR}"
    echo -e "${GREEN}5. Create Secure Boot Keys${ENDCOLOR}"
    echo -e "${GREEN}6. Convert Certificates to Esl & Auth Format${ENDCOLOR}"
    echo -e "${GREEN}7. Enroll Created and OEM Keys${ENDCOLOR}"
    echo -e "${GREEN}8. Enroll Microsoft Keys${ENDCOLOR}"
    echo -e "${GREEN}9. Install GRUB for Secure Boot${ENDCOLOR}"
    echo -e "${GREEN}10. Sign GRUB Bootloader${ENDCOLOR}"
    echo -e "${GREEN}11. Sign All Kernels${ENDCOLOR}"
    echo -e "${GREEN}12. Setup Automatic Signing${ENDCOLOR}"
    echo -e "${GREEN}13. Remove Automatic Signing${ENDCOLOR}"
    echo -e "${GREEN}14. Sign DKMS${ENDCOLOR}"
    echo -e "${PURPLE}15. Reboot to UEFI Settings${ENDCOLOR}"
    echo -e "${GREEN}16. Restore Backed Up files${ENDCOLOR}"
    echo -e "${RED}17. Reset Script (Also created keys will be lost!!!)${ENDCOLOR}"
    echo -e "${RED}18. Exit${ENDCOLOR}"
    echo -e "${BLUE}===================================================${ENDCOLOR}"
    echo -n -e "${BLUE}[*] Enter your choice (1-18): ${ENDCOLOR}"
}

# Main loop
while true; do
    display_menu
    read choice

    case $choice in
        1)
            # Start stage2
    	    if [[ "$STAGE_2" -eq 1 ]]; then
                complete_setup_stage2
                read -rp "Press Enter to continue..."
    	    else
                complete_setup_stage1
                read -rp "Press Enter to continue..."
            fi
            ;;
        2)
            status
            read -rp "Press Enter to continue..."
            ;;
        3)
            info_msg "Enrolled keys:"
            efi-readvar
            read -rp "Press Enter to continue..."
            ;;
        4)
            backup
            read -rp "Press Enter to continue..."
            ;;
        5)
            mkconfigs
            mkcert
            read -rp "Press Enter to continue..."
            ;;
        6)
            convert
            read -rp "Press Enter to continue..."
            ;;
        7)
            enroll
            enroll_oem
            info_msg "Enrolled keys:"
            efi-readvar
            read -rp "Press Enter to continue..."
            ;;
        8)
            enroll_ms
            info_msg "Enrolled keys:"
            efi-readvar
            read -rp "Press Enter to continue..."
            ;;
        9)
            info_msg "Installing GRUB for Secure Boot..."
            grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=kali --modules="tpm" --disable-shim-lock || error_exit "Failed to install GRUB for Secure Boot"
            success_msg "Installed GRUB succesfully."
            read -rp "Press Enter to continue..."
            ;;
        10)
            sign_grub
            read -rp "Press Enter to continue..."
            ;;
        11)
            sign_all_kernels
            read -rp "Press Enter to continue..."
            ;;
        12)
            setup_automatic_signing
            read -rp "Press Enter to continue..."
            ;;
        13)
            remove_automatic_signing
            read -rp "Press Enter to continue..."
            ;;
        14)
            dkms_sign
            read -rp "Press Enter to continue..."
            ;;
        15)
            info_msg "Rebooting to UEFI firmware settings..."
            systemctl reboot --firmware-setup
            ;;
        16)
            restore
            read -rp "Press Enter to continue..."
            ;;
        17)
            read -rp "Do you want to reset? [y/N]: " response
            response="${response:-no}"
            if [[ "${response,,}" =~ ^(y|yes)$ ]]; then
                reset
            else
                info_msg "Reset aborted."
            fi
            read -rp "Press Enter to continue..."
            ;;
        18)
            info_msg "Exiting..."
            exit 0
            ;;
        *)
            error_exit "Invalid option! Please select a valid choice."
            read -rp "Press Enter to continue..."
            ;;
    esac
done
